/// get all iterable gaps
///
/// @param {list} $contains list of not iterable gaps to contains in iteration list
/// @return {map} gaps list
/// @example @each $name, $gap in _gaps(){ ...
/// @example @each $name, $gap in _gaps('element' 'container'){ ...
@function _gaps($contains: ()) {
    $e: type-check($contains, "_gaps", "contains", "list");
    $res: ();
    @each $key, $data in $--gaps {
        @if (index($contains, $key) != null or nth($data, 2) == true) {
            $res: map-merge(
                $res,
                (
                    $key: nth($data, 1),
                )
            );
        }
    }
    @return $res;
}

/// get all iterable units
///
/// @param {list} $contains list of not iterable units to contains in iteration list
/// @return {map} units list
/// @example @each $name, $unit in _units(){ ...
/// @example @each $name, $unit in _units(('avatar' 'notification')){ ...
@function _units($contains: ()) {
    $e: type-check($contains, "_units", "contains", "list");
    $res: ();
    @each $key, $data in $--units {
        @if (index($contains, $key) != null or nth($data, 2) == true) {
            $res: map-merge(
                $res,
                (
                    $key: nth($data, 1),
                )
            );
        }
    }
    @return $res;
}

/// get all iterable colors
///
/// @param {list} $contains list of not iterable colors to contains in iteration list
/// @return {map} colors list
/// @example @each $name, $color in _colors(){ ...
/// @example @each $name, $color in _colors(('teal' 'gray')){ ...
@function _colors($contains: ()) {
    $e: type-check($contains, "_colors", "contains", "list");
    $res: ();
    @each $key, $data in $--palette {
        @if (index($contains, $key) != null or nth($data, 2) == true) {
            $res: map-merge(
                $res,
                (
                    $key: nth($data, 1),
                )
            );
        }
    }
    @return $res;
}

/// get palette for all iterable colors
///
/// @param {string} $variant
/// @param {list} $contains list of not iterable colors to contains in iteration list
/// @return {map} colors list
/// @example @each $name, $color in _palettes('900'){ ...
/// @example @each $name, $color in _palettes('100', ('teal' 'gray')){ ...
@function _palettes($variant: 500, $contains: ()) {
    $e: type-check($variant, "_palettes", "variant", "string");
    $e: type-check($contains, "_palettes", "contains", "list");
    $res: ();
    $colors: _colors($contains);
    @each $key, $color in $colors {
        $res: map-merge(
            $res,
            (
                $key: palette($color, $variant),
            )
        );
    }
    @return $res;
}

/// get all iterable sizes
///
/// @param {list} $contains list of not iterable font-sizes to contains in iteration list
/// @return {map} font sizes list
/// @example @each $name, $size in _sizes(){ ...
/// @example @each $name, $size in _sizes(('header' 'other')){ ...
@function _sizes($contains: ()) {
    $e: type-check($contains, "_sizes", "contains", "list");
    $res: ();
    @each $key, $data in $--sizes {
        @if (index($contains, $key) != null or nth($data, 2) == true) {
            $res: map-merge(
                $res,
                (
                    $key: nth($data, 1),
                )
            );
        }
    }
    @return $res;
}

/// get breakpoints label and query
///
/// @return {map} breakpoints list
/// @example:
/// @each $device, $mq in _breakpoints(){
///     @media #{$mq}{
///         ...
///     }
/// }
@function _breakpoints() {
    @return $--breakpoints;
}

/// get all font weights
///
/// @return {map} font weights list
/// @example @each $name, $weight in _weights(){ ...
@function _weights() {
    @return $--weights;
}
