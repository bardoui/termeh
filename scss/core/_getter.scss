/// Get component variable
///
/// @param {string} $component component name
/// @param {string} $property property name
/// @param {any} $fallback default value if property not registered
/// @return {any} return value on found and fallback on fails
/// @example border-color: _var('panel', 'border', #a7a7a7);
@function _var($component, $property, $fallback: null) {
    $e: type-check($component, "_var", "component", "string");
    $e: type-check($property, "_var", "property", "string");
    @if map-has-key($--vars, $component) {
        $componentMap: map-get($--vars, $component);
        @if map-has-key($componentMap, $property) {
            @return map-get($componentMap, $property);
        }
    }
    @return $fallback;
}

/// Get gap
///
/// @param {string} $name gap name
/// @return {number} return gap on found and throw error on fails
/// @example margin-bottom: _gap('element');
@function _gap($name) {
    $e: type-check($name, "_gap", "name", "string");
    @if map-has-key($--gaps, $name) {
        @return nth(map-get($--gaps, $name), 1);
    }
    @error "#{$name} gap not found!";
}

/// Get unit
///
/// @param {string} $name unit name
/// @return {number} return unit on found and throw error on fails
/// @example width: _unit('half');
/// @example width: _unit('avatar');
@function _unit($name) {
    $e: type-check($name, "_unit", "name", "string");
    @if map-has-key($--units, $name) {
        @return nth(map-get($--units, $name), 1);
    }
    @error "#{$name} unit not found!";
}

/// Get color
///
/// @param {string} $name color name
/// @return {number} return color on found and throw error on fails
/// @example background-color: _color('primary');
@function _color($name) {
    $e: type-check($name, "_color", "name", "string");
    @if map-has-key($--palette, $name) {
        @return nth(map-get($--palette, $name), 1);
    }
    @error "#{$name} color not found!";
}

/// get palette for registered color
///
/// @param {string} $name registered color name
/// @param {string} $variant
/// @return {color} return palette on success and error on fails
/// @example color: _palette('primary', '900');
@function _palette($name, $variant: "500") {
    @return palette(_color($name), $variant);
}

/// Get font size
///
/// @param {string} $name font size name
/// @return {number} return font size on found and throw error on fails
/// @example font-size: _size('huge');
@function _size($name) {
    $e: type-check($name, "_size", "name", "string");
    @if map-has-key($--sizes, $name) {
        @return nth(map-get($--sizes, $name), 1);
    }
    @error "#{$name} font size not found!";
}

/// Get breakpoint
///
/// @param {string} $name breakpoint name (mobile, tablet, tablet-only, until-desktop, desktop, desktop-only, until-widescreen, widescreen, widescreen-only, until-fullhd, fullhd)
/// @return {number} return breakpoint query on found and throw error on fails
/// @example @media #{_breakpoint("mobile")} { ...
@function _breakpoint($name) {
    $e: type-check($name, "_breakpoint", "name", "string");
    @if map-has-key($--breakpoints, $name) {
        @return map-get($--breakpoints, $name);
    }
    @error "#{$name} breakpoint not found!";
}

/// Get font weight
///
/// @param {string} $name font weight name
/// @return {number} return font weight on found and throw error on fails
/// @example font-weight: _weight('bolder');
@function _weight($name) {
    $e: type-check($name, "_weight", "name", "string");
    @if map-has-key($--weights, $name) {
        @return map-get($--weights, $name);
    }
    @error "#{$name} font weight not found!";
}
