/// Set variable for component
///
/// @param {string} $component component name
/// @param {string} $property property name
/// @param {string} $value value
/// @example @include _var('sidebar', 'background', white);
@mixin _var($component, $property, $value) {
    $e: type-check($component, "_var", "component", "string");
    $e: type-check($property, "_var", "property", "string");
    $componentMap: ();
    @if map-has-key($--vars, $component) {
        $componentMap: map-get($--vars, $component);
    }
    $componentMap: map-merge(
        $componentMap,
        (
            $property: $value,
        )
    );
    $--vars: map-merge(
        $--vars,
        (
            $component: $componentMap,
        )
    ) !global;
}

/// Register new gap
///
/// @param {string} $name gap name
/// @param {number} $size gap size
/// @param {boolean} $is-iterable specific new gap must list in iteration gaps or not
/// @example @include _gap('normal', 1rem, true);
/// @example @include _gap('container', 1rem, false);
@mixin _gap($name, $size, $is-iterable: true) {
    $e: type-check($name, "_gap", "name", "string");
    $e: type-check($size, "_gap", "size", "number");
    $e: type-check($is-iterable, "_gap", "is-iterable", "bool");
    $--gaps: map-merge(
        $--gaps,
        (
            $name: $size $is-iterable,
        )
    ) !global;
}

/// Register new unit
///
/// @param {string} $name unit name
/// @param {number} $size unit size
/// @param {boolean} $is-iterable specific new unit must list in iteration units or not
/// @example @include _unit('half', 50%, true);
/// @example @include _unit('avatar', 2rem, false);
@mixin _unit($name, $size, $is-iterable: true) {
    $e: type-check($name, "_unit", "name", "string");
    $e: type-check($size, "_unit", "size", "number");
    $e: type-check($is-iterable, "_unit", "is-iterable", "bool");
    $--units: map-merge(
        $--units,
        (
            $name: $size $is-iterable,
        )
    ) !global;
}

/// Register new color
///
/// @param {string} $name color name
/// @param {color} $color
/// @param {boolean} $is-iterable specific new color must list in iteration colors or not
/// @example @include _color('primary', blue, true);
@mixin _color($name, $color, $is-iterable: false) {
    $e: type-check($name, "_color", "name", "string");
    $e: type-check($color, "_color", "color", "color");
    $e: type-check($is-iterable, "_color", "is-iterable", "bool");
    $--palette: map-merge(
        $--palette,
        (
            $name: $color $is-iterable,
        )
    ) !global;
}

/// Register new font size
///
/// @param {string} $name font size name
/// @param {number} $size font size
/// @param {boolean} $is-iterable specific new font size must list in iteration font sizes or not
/// @example @include _size('huge', 3rem, true);
@mixin _size($name, $size, $is-iterable: true) {
    $e: type-check($name, "_size", "name", "string");
    $e: type-check($size, "_size", "size", "number");
    $e: type-check($is-iterable, "_size", "is-iterable", "bool");
    $--sizes: map-merge(
        $--sizes,
        (
            $name: $size $is-iterable,
        )
    ) !global;
}
