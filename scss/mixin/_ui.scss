/// Reset style of control
///
/// @example @include control();
@mixin control() {
    appearance: none;
    -webkit-tap-highlight-color: transparent;
    display: inline-flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
    flex-wrap: nowrap;
    box-sizing: border-box;
    box-shadow: none;
    position: relative;
    border: none;
    outline: 0;
    white-space: nowrap;
    // States
    &:focus,
    &.is-focused,
    &:active,
    &.is-activated {
        outline: none;
    }

    &[disabled],
    &.is-disabled {
        cursor: default;
    }

    &::-moz-focus-inner {
        border: 0;
    }
}

/// Style scrollbar
///
/// @param {number} $width scrollbar width
/// @param {color} $track track background color
/// @param {color} $thumb thumb background color
/// @param {color} $thumb-hover thumb hover state background color
/// @example @include scrollbar(6px, gray, darkgray, red);
@mixin scrollbar($width, $track: null, $thumb: null, $thumb-hover: null) {
    $e: type-check($width, "scrollbar", "width", "number");
    $e: type-check($track, "scrollbar", "track", "color");
    $e: type-check($thumb, "scrollbar", "thumb", "color");
    $e: type-check($thumb-hover, "scrollbar", "thumb-hover", "color");

    &::-webkit-scrollbar {
        width: $width;
    }

    &::-webkit-scrollbar-track {
        background: $track;
        box-shadow: 0 0 3px 0 _palette("shade", "200") inset,
            0 0 1px _palette("shade", "200") inset;
        transition: all 200ms;
    }

    &::-webkit-scrollbar-thumb {
        background: $thumb;
        transition: all 200ms;
    }

    &::-webkit-scrollbar-thumb:hover {
        background: $thumb-hover;
    }
}

/// Create css spinner
///
/// @param {number} $size spinner size
/// @param {color} $color spinner color
/// @example @include spinner(1.5rem, red, 1px);
@mixin spinner($size, $color, $width) {
    $e: type-check($size, "spinner", "size", "number");
    $e: type-check($color, "spinner", "color", "color");
    $e: type-check($width, "spinner", "width", "number");

    position: relative;
    z-index: 0;

    &::after {
        text-rendering: optimizeLegibility;
        display: block;
        position: absolute;
        box-sizing: border-box;
        content: "";
        z-index: 2;
        left: 50%;
        top: 50%;
        transform: translate3d(-50%, -50%, 0);
        width: $size;
        height: $size;
        border-radius: _var("radius", "circle");
        animation: spinner-animation 900ms infinite
            cubic-bezier(0.86, 0, 0.07, 1);
        @at-root {
            @keyframes spinner-animation {
                from {
                    transform: translate3d(-50%, -50%, 0) rotate(0deg);
                }
                to {
                    transform: translate3d(-50%, -50%, 0) rotate(360deg);
                }
            }
        }
        border: $width solid $color;
        border-top-color: transparent;
        border-bottom-color: transparent;
    }
}

/// Create overlay on container
///
/// @param {color} $color overlay color
/// @example @include overlay(rgba(0,0,0, 0.5));
@mixin overlay($color) {
    $e: type-check($color, "overlay", "color", "color");

    position: relative;
    z-index: 0;

    &::before {
        content: "";
        position: absolute;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background: $color;
        backdrop-filter: _var("overlay", "filter");
    }
}
