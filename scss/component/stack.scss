.stack {
    display: inline-flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: flex-start;
    box-sizing: border-box;

    > * {
        flex-shrink: 0;
    }

    > .filler {
        flex-grow: 1;
    }

    > .divider {
        width: 1px;
        align-self: stretch;
        background: _color("separator");
        margin: 0 _gap("element");
    }

    > .gap {
        flex: none;
        display: block;
        box-sizing: border-box;
        height: 1px;
        width: _gap("element");
    }

    &.is-fluid {
        display: flex;
    }

    &.is-stacked {
        flex-direction: column;

        > .divider {
            height: 1px;
            width: unset;
            margin: _gap("element") 0;
        }

        > .gap {
            height: _gap("element");
            width: unset;
        }

        &-reverse {
            flex-direction: column-reverse;

            > .divider {
                height: 1px;
                width: unset;
                margin: _gap("element") 0;
            }

            > .gap {
                height: _gap("element");
                width: unset;
            }
        }
    }

    &.is-gap-less {
        > .divider {
            margin: 0;
        }

        > .gap {
            display: none;
        }
    }

    @each $label, $gap in _gaps(_var("stack", "gaps", ())) {
        &.is-#{$label}-gaped {
            > .divider {
                margin: 0 $gap;
            }

            > .gap {
                width: $gap;
            }

            &.is-stacked {
                > .divider {
                    margin: $gap 0;
                }

                > .gap {
                    height: $gap;
                }

                &-reverse {
                    > .divider {
                        margin: $gap 0;
                    }

                    > .gap {
                        height: $gap;
                    }
                }
            }
        }
    }

    @each $device, $mq in _breakpoints() {
        @media #{$mq} {
            &.is-#{$device}-fluid {
                display: flex;
            }
            &.is-#{$device}-stacked {
                flex-direction: column;

                > .divider {
                    height: 1px;
                    width: unset;
                    margin: _gap("element") 0;
                }

                > .gap {
                    height: _gap("element");
                    width: unset;
                }

                &-reverse {
                    flex-direction: column-reverse;

                    > .divider {
                        height: 1px;
                        width: unset;
                        margin: _gap("element") 0;
                    }

                    > .gap {
                        height: _gap("element");
                        width: unset;
                    }
                }
            }

            &.is-#{$device}-gap-less {
                > .divider {
                    margin: 0;
                }

                > .gap {
                    display: none;
                }
            }

            @each $label, $gap in _gaps(_var("stack", "gaps", ())) {
                &.is-#{$device}-#{$label}-gaped {
                    > .divider {
                        margin: 0 $gap;
                    }

                    > .gap {
                        width: $gap;
                    }

                    &.is-stacked {
                        > .divider {
                            margin: $gap 0;
                        }

                        > .gap {
                            height: $gap;
                        }

                        &-reverse {
                            > .divider {
                                margin: $gap 0;
                            }

                            > .gap {
                                height: $gap;
                            }
                        }
                    }
                }
            }
        }
    }
}
