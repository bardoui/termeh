.content {
    flex: 1;
    box-sizing: border-box;
    overflow: hidden;
    overflow-y: auto;
    @extend .is-scrollable;
    padding: _gap("container");

    > .overlay {
        display: flex;
        position: absolute;
        box-sizing: border-box;
        padding: _gap("container");
        overflow: hidden;
        overflow-y: auto;
        left: 0;
        top: 0;
        bottom: 0;
        right: 0;
        background: _color("overlay");
        color: foreground(_color("overlay"));
        backdrop-filter: _var("overlay", "filter");
        transition: all _var("transition", "duration")
            _var("transition", "ease");
        opacity: 0;
        z-index: -1;
        @extend .is-scrollable;

        & > * {
            margin: auto;
            max-width: 100%;
        }
    }

    &.is-full {
        width: 100%;
        height: 100%;
    }

    &.is-centered {
        display: flex;
        > * {
            margin: auto;
        }
    }

    &.is-loading {
        overflow-y: hidden;
        @include overlay(_color("overlay"));
        @include spinner(
            $size: _var("spinner", "size", 2rem),
            $color: foreground(_color("overlay")),
            $width: _var("decorator", "size", 2px)
        );
    }

    &.is-overlaid:not(.is-loading) {
        > .overlay {
            z-index: 2;
            opacity: 1;
        }
    }

    @each $label, $gap in _gaps(_var("content", "gaps", ())) {
        &.is-#{$label}-padded {
            padding: $gap;

            > .overlay {
                padding: $gap;
            }
        }
    }

    @each $name, $color in _colors(_var("content", "colors", ())) {
        &.is-#{$name} {
            @include scrollbar(
                _var("scroll", "size", 1rem),
                _palette("shade", "50"),
                _palette("shade", "300"),
                $color
            );

            > .overlay {
                @include scrollbar(
                    $width: _var("scroll", "size", 1rem),
                    $track: _palette("shade", "50"),
                    $thumb: _palette("shade", "300"),
                    $thumb-hover: $color
                );
            }

            &.is-loading {
                @include spinner(
                    $size: _var("spinner", "size", 2rem),
                    $color: $color,
                    $width: _var("decorator", "size", 2px)
                );
            }
        }
    }

    @each $device, $mq in _breakpoints() {
        @media #{$mq} {
            &.is-#{$device}-padding-less {
                padding: 0 !important;
            }

            @each $label, $gap in _gaps(_var("content", "gaps", ())) {
                &.is-#{$device}-#{$label}-padded {
                    padding: $gap !important;
                }
            }
        }
    }
}
