@use "sass:math";
@use "sass:color";
@use "sass:map";
@use "func";
@use "getter";
@use "store";
@use "contrast";
@use "palette";
@use "a11y";

@function negate($value) {
    $value: func.number-of($value, "negate", "value");
    @return -$value;
}

@function shadow($x, $y, $color, $soft: false) {
    $x: func.number-of($x, "shadow", "x");
    $y: func.number-of($y, "shadow", "y");
    $color: func.color-of($color, "shadow", "color");
    $soft: func.bool-of($soft, "shadow", "soft");
    $max: math.max(math.abs($x), math.abs($y));
    $blur: $max * if($soft == true, 3, 2);
    $spread: $max * if($soft == true, -1, 0);
    $color: color.change($color, $alpha: if($soft == true, 0.15, 0.3));
    @return $x $y $blur $spread $color;
}

@function el-pad($padding) {
    $padding: func.number-of($padding, "e-pad", "padding");
    @return math.div($padding, 2) $padding;
}

@function transition-params() {
    @return getter.var("transition", "duration")
        getter.var("transition", "ease");
}

@function foreground($color, $bold: false, $size: null) {
    $rem: getter.var("font", "size", 12px);

    $color: func.color-of($color, "foreground", "color");
    $bold: func.bool-of($bold, "foreground", "bold");
    $size: func.number-of(if($size == null, $rem, $size), "foreground", "size");

    $ratio: a11y.a11y-ratio("AA", $size, $rem, $bold);
    $white: color.mix(white, $color, 90%);
    $black: color.mix(black, $color, 90%);

    $contrast: contrast.contrast-ratio($white, $color);
    $contrast: math.div(math.round($contrast * 100), 100);
    @if $contrast >= $ratio {
        @return $white;
    } @else {
        @return $black;
    }
}

@function darkest($color) {
    $color: func.color-of($color, "darkest", "color");
    @return palette.palette-of($color, "900");
}

@function brightest($color) {
    $color: func.color-of($color, "brightest", "color");
    @return palette.palette-of($color, "50");
}

@function readable($base, $color, $bold: false, $size: null) {
    $rem: getter.var("font", "size", 12px);

    $base: func.color-of($base, "readable", "base");
    $color: func.color-of($color, "readable", "color");
    $bold: func.bool-of($bold, "readable", "bold");
    $size: func.number-of(if($size == null, $rem, $size), "readable", "size");

    @return a11y.a11y($color, $base, "AA", $size, $rem, $bold);
}

@function muted($background, $color, $text: true) {
    $background: func.color-of($background, "muted", "background");
    $color: func.color-of($color, "muted", "color");
    $text: func.bool-of($text, "disabled", "text");
    $tone: contrast.tone($background);
    $color: palette.palette-of($color, if($tone == "light", "800", "200"));
    @return color.mix($background, $color, if($text == true, 50%, 75%));
}

@function disabled($color, $text: false) {
    $color: func.color-of($color, "disabled", "color");
    $text: func.bool-of($text, "disabled", "text");
    $tone: contrast.tone($color);
    $col: palette.palette-of(
        getter.color("shade"),
        if($tone == "light", "800", "200")
    );
    @return color.mix($color, $col, if($text == true, 80%, 90%));
}

@function state($background, $color) {
    $background: func.color-of($background, "state", "background");
    $color: func.color-of($color, "state", "color");
    $tone: contrast.tone($background);
    @return palette.palette-of($color, if($tone == "light", "600", "400"));
}
