@use "sass:map";
@use "sass:list";
@use "func";
@use "store";
@use "getter";
@use "palette";

@function gaps($includes: ()) {
    $includes: func.list-of($includes, "gaps", "includes");
    $res: ();
    @each $k, $v in store.gaps() {
        @if list.index($includes, $k) != null or list.nth($v, 2) == true {
            $res: map.merge($res, func.map-from($k, list.nth($v, 1)));
        }
    }
    @return $res;
}

@function units($includes: ()) {
    $includes: func.list-of($includes, "units", "includes");
    $res: ();
    @each $k, $v in store.units() {
        @if list.index($includes, $k) != null or list.nth($v, 2) == true {
            $res: map.merge($res, func.map-from($k, list.nth($v, 1)));
        }
    }
    @return $res;
}

@function colors($includes: ()) {
    $includes: func.list-of($includes, "colors", "includes");
    $res: ();
    @each $k, $v in store.colors() {
        @if list.index($includes, $k) != null or list.nth($v, 2) == true {
            $res: map.merge($res, func.map-from($k, list.nth($v, 1)));
        }
    }
    @return $res;
}

@function palettes($variant: 500, $includes: ()) {
    $variant: func.string-of($variant, "palettes", "variant");
    $includes: func.list-of($includes, "palettes", "includes");
    $colors: colors($includes);
    $res: ();
    @each $k, $v in store.colors() {
        $res: map.merge($res, func.map-from($k, palette.palette-of($v, $variant)));
    }
    @return $res;
}

@function sizes($includes: ()) {
    $includes: func.list-of($includes, "sizes", "includes");
    $res: ();
    @each $k, $v in store.sizes() {
        @if list.index($includes, $k) != null or list.nth($v, 2) == true {
            $res: map.merge($res, func.map-from($k, list.nth($v, 1)));
        }
    }
    @return $res;
}

@function breakpoints() {
    @return store.breakpoints();
}

@function media-queries($includes: ()) {
    $includes: func.list-of($includes, "media-queries", "includes");
    $ignores: getter.var("media-query", "ignore", ());
    $res: ();
    @each $k, $v in store.media-queries() {
        @if list.index($includes, $k) !=
            null or
            list.index($ignores, $k) ==
            null
        {
            $res: map.merge($res, func.map-from($k, $v));
        }
    }
    @return $res;
}

@function font-weights($only: ()) {
    $only: func.list-of($only, "sizes", "only");
    @if list.length($only) == 0 {
        @return store.font-weights();
    } @else {
        $res: ();
        @each $k, $v in store.sizes() {
            @if list.index($only, $k) != null {
                $res: map.merge($res, func.map-from($k, $v));
            }
        }
        @return $res;
    }
}
