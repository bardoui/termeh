@use "sass:map";
@use "sass:list";
@use "func";
@use "store";
@use "palette";

@function var($component, $property, $fallback: null) {
    $component: func.string-of($component, "var", "component");
    $property: func.string-of($property, "var", "property");
    $c-vars: store.component-vars($component);
    @if map.has-key($c-vars, $property) {
        @return map.get($c-vars, $property);
    }
    @return $fallback;
}

@function gap($name) {
    $name: func.string-of($name, "gap", "name");
    @if map.has-key(store.gaps(), $name) {
        @return list.nth(map.get(store.gaps(), $name), 1);
    }
    @error "#{$name} gap not found!";
}

@function unit($name) {
    $name: func.string-of($name, "unit", "name");
    @if map.has-key(store.units(), $name) {
        @return list.nth(map.get(store.units(), $name), 1);
    }
    @error "#{$name} unit not found!";
}

@function color($name) {
    $name: func.string-of($name, "color", "name");
    @if map.has-key(store.colors(), $name) {
        @return list.nth(map.get(store.colors(), $name), 1);
    }
    @error "#{$name} color not found!";
}

@function palette($name, $variant: "500") {
    $name: func.string-of($name, "palette", "name");
    @return palette.palette-of(color($name), $variant);
}

@function size($name) {
    $name: func.string-of($name, "size", "name");
    @if map.has-key(store.sizes(), $name) {
        @return list.nth(map.get(store.sizes(), $name), 1);
    }
    @error "#{$name} size not found!";
}

@function breakpoint($device) {
    $name: func.string-of($device, "breakpoint", "device");
    @if map.has-key(store.breakpoints(), $device) {
        @return map.get(store.breakpoints(), $device);
    }
    @error "#{$device} breakpoint not found!";
}

@function media-query($name) {
    $name: func.string-of($name, "media-query", "name");
    @if map.has-key(store.media-queries(), $name) {
        @return map.get(store.media-queries(), $name);
    }
    @error "#{$name} media query not found!";
}

@function font-weight($name) {
    $name: func.string-of($name, "font-weight", "name");
    @if map.has-key(store.font-weights(), $name) {
        @return map.get(store.font-weights(), $name);
    }
    @error "#{$name} font-weight not found!";
}
