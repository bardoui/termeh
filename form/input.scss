@use "sass:math";
@use "../termeh" as T;

$-gaps: T.var("input", "gaps", ());
$-colors: T.var("input", "colors", ());
$-separator: T.var("base", "separator", 1px);

.input {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-items: center;
    padding: T.el-pad(T.gap("element"));
    background-color: T.color("input");
    border: 1px solid T.color("separator");
    border-radius: T.var("radius", "normal");

    > .divider {
        display: block;
        align-self: stretch;
        width: $-separator;
        background-color: T.color("separator");
        margin: 0 math.div(T.gap("element"), 2);
    }

    > .gutter {
        display: block;
        box-sizing: border-box;
        flex: 0 0 auto;
        width: T.gap("element");
    }

    input {
        @include T.control();
        display: block;
        flex: 1 1 0;
        border-radius: 0;

        @include T.placeholder {
            color: T.muted(T.color("input"), T.color("foreground"));
        }
    }

    &:focus-within {
        border-color: T.color("primary");
    }

    &.is-failed {
        border-color: T.color("error");
    }

    @each $name, $gap in T.gaps($-gaps) {
        &.is-#{$name}-padded {
            padding: T.el-pad($gap);

            > .divider {
                margin: 0 math.div($gap, 2);
            }

            > .gutter {
                width: $gap;
            }
        }
    }

    @each $name, $color in T.colors($-colors) {
        &.is-#{$name} {
            &:focus-within {
                border-color: $color;
            }

            &::selection {
                background-color: $color;
                color: T.foreground($color);
            }
        }
    }

    fieldset[disabled] &,
    &.is-disabled {
        @include T.locked();
        background: T.disabled(T.color("input")) !important;
        border-color: T.disabled(T.color("input"), true) !important;
        color: T.muted(T.color("input"), T.color("foreground")) !important;
    }
}
